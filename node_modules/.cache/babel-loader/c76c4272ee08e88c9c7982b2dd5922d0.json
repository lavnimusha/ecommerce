{"ast":null,"code":"var _jsxFileName = \"/Users/lavanyagurajada/enguyen/ecommerce/src/Pages/Cart.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { database } from \"../firebase-config\";\nimport { ref, onValue } from \"firebase/database\";\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Divider from '@mui/material/Divider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet total = 0;\n\nfunction Cart() {\n  _s();\n\n  const [cart, setCart] = useState({});\n  const [inventory, setInventory] = useState({});\n  useEffect(() => {\n    // Update the document title using the browser API\n    const starCountRef = ref(database, 'shopping/');\n    onValue(starCountRef, snapshot => {\n      const data = snapshot.val(); //setCart(data)\n\n      localStorage.setItem('data', JSON.stringify(data));\n      console.log('##################');\n      console.log(data);\n    });\n    console.log('*******************');\n    setCart(localStorage.getItem('data'));\n    /* let obj: InventoryEntry = {}\n    Object.entries(cart).forEach(func)\n    function func(value: [string, Product]){\n      console.log(typeof(value[0]))\n       if(!obj.hasOwnProperty(value[1].title))\n        obj[value[1].title] = {\n          picture: value[1].picture,\n          entries: [value[0]],\n          price: value[1].price,\n          count: 1\n        }\n        else{\n          let arr :string[] = [...obj[value[1].title].entries] \n          arr.push(value[0])\n          arr = [...removeDuplicates(arr)]\n          obj[value[1].title].entries = [...arr];\n          (obj[value[1].title]).count += 1; \n          }\n        } \n        function removeDuplicates(entryArr :string[]){\n            for( let i = 0; i < entryArr.length; i++){\n                if(entryArr.lastIndexOf(entryArr[i]) != i ){\n                      entryArr.splice(entryArr.lastIndexOf(entryArr[i]), 1)      \n                }\n            }\n            return entryArr\n        }\n        setInventory(obj)\n    Object.entries(obj).map((data,index)=>{console.log(data[1].entries)})\n    */\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      flexGrow: 1\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: Object.entries(inventory).map((data, index) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        sx: {\n          width: \"90%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Cart, \"JNonsryfUEpylhn7WObdfpI+X4w=\");\n\n_c = Cart;\nexport default Cart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"names":["React","useEffect","useState","database","ref","onValue","Box","Grid","Divider","total","Cart","cart","setCart","inventory","setInventory","starCountRef","snapshot","data","val","localStorage","setItem","JSON","stringify","console","log","getItem","display","flexGrow","Object","entries","map","index","width"],"sources":["/Users/lavanyagurajada/enguyen/ecommerce/src/Pages/Cart.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {database} from \"../firebase-config\"\nimport { getDatabase, ref, onValue} from \"firebase/database\";\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport CartCard from '../Components/CartCard'\nimport Divider from '@mui/material/Divider';\n\ninterface Inventory {\n  picture: string,\n  entries: string[],\n  price: string,\n  count: number\n}\ninterface InventoryEntry{\n  [title:string]: Inventory\n}\ninterface Product  {\n  picture: string,\n  title: string,\n  price: string\n}\ninterface ProductEntry {\n  [key:string]: Product\n}\nlet total:number = 0\n\n\nfunction Cart() {\n  const [cart, setCart] =  useState<ProductEntry>({})\n  const [inventory, setInventory] =  useState<InventoryEntry>({})\n  \n\n  useEffect(() => {\n    // Update the document title using the browser API\n    const starCountRef = ref(database, 'shopping/');\n    onValue(starCountRef, (snapshot) => {\n      const data = snapshot.val();\n      //setCart(data)\n      localStorage.setItem('data',JSON.stringify(data))\n      console.log('##################')\n      console.log(data)\n    });\n    \n      console.log('*******************')\n      setCart(localStorage.getItem('data'))\n      /* let obj: InventoryEntry = {}\n      Object.entries(cart).forEach(func)\n      function func(value: [string, Product]){\n        console.log(typeof(value[0]))\n         if(!obj.hasOwnProperty(value[1].title))\n          obj[value[1].title] = {\n            picture: value[1].picture,\n            entries: [value[0]],\n            price: value[1].price,\n            count: 1\n          }\n          else{\n            let arr :string[] = [...obj[value[1].title].entries] \n            arr.push(value[0])\n            arr = [...removeDuplicates(arr)]\n            obj[value[1].title].entries = [...arr];\n            (obj[value[1].title]).count += 1; \n            }\n          } \n          function removeDuplicates(entryArr :string[]){\n              for( let i = 0; i < entryArr.length; i++){\n                  if(entryArr.lastIndexOf(entryArr[i]) != i ){\n                        entryArr.splice(entryArr.lastIndexOf(entryArr[i]), 1)      \n                  }\n              }\n              return entryArr\n          }\n          setInventory(obj)\n      Object.entries(obj).map((data,index)=>{console.log(data[1].entries)})\n     */\n  },[]);\n\n  return (\n    <Box sx={{ display: 'flex', flexGrow: 1 }}>\n      \n       <Grid container  >\n        {Object.entries(inventory).map((data, index) => (\n          <Grid item sx={{width: \"90%\"}} key={index}>\n             {/* <CartCard entries={data[1].entries} title={data[0]} picture={data[1].picture}  price={data[1].price} count={data[1].count}/>  */}\n            <Divider />\n          </Grid>\n        ))}\n      </Grid> \n    </Box>\n  )\n}\n\nexport default Cart"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAAQC,QAAR,QAAuB,oBAAvB;AACA,SAAsBC,GAAtB,EAA2BC,OAA3B,QAAyC,mBAAzC;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AAEA,OAAOC,IAAP,MAAiB,oBAAjB;AAEA,OAAOC,OAAP,MAAoB,uBAApB;;AAmBA,IAAIC,KAAY,GAAG,CAAnB;;AAGA,SAASC,IAAT,GAAgB;EAAA;;EACd,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAmBV,QAAQ,CAAe,EAAf,CAAjC;EACA,MAAM,CAACW,SAAD,EAAYC,YAAZ,IAA6BZ,QAAQ,CAAiB,EAAjB,CAA3C;EAGAD,SAAS,CAAC,MAAM;IACd;IACA,MAAMc,YAAY,GAAGX,GAAG,CAACD,QAAD,EAAW,WAAX,CAAxB;IACAE,OAAO,CAACU,YAAD,EAAgBC,QAAD,IAAc;MAClC,MAAMC,IAAI,GAAGD,QAAQ,CAACE,GAAT,EAAb,CADkC,CAElC;;MACAC,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA4BC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAA5B;MACAM,OAAO,CAACC,GAAR,CAAY,oBAAZ;MACAD,OAAO,CAACC,GAAR,CAAYP,IAAZ;IACD,CANM,CAAP;IAQEM,OAAO,CAACC,GAAR,CAAY,qBAAZ;IACAZ,OAAO,CAACO,YAAY,CAACM,OAAb,CAAqB,MAArB,CAAD,CAAP;IACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACG,CA3CQ,EA2CP,EA3CO,CAAT;EA6CA,oBACE,QAAC,GAAD;IAAK,EAAE,EAAE;MAAEC,OAAO,EAAE,MAAX;MAAmBC,QAAQ,EAAE;IAA7B,CAAT;IAAA,uBAEG,QAAC,IAAD;MAAM,SAAS,MAAf;MAAA,UACEC,MAAM,CAACC,OAAP,CAAehB,SAAf,EAA0BiB,GAA1B,CAA8B,CAACb,IAAD,EAAOc,KAAP,kBAC7B,QAAC,IAAD;QAAM,IAAI,MAAV;QAAW,EAAE,EAAE;UAACC,KAAK,EAAE;QAAR,CAAf;QAAA,uBAEE,QAAC,OAAD;UAAA;UAAA;UAAA;QAAA;MAFF,GAAoCD,KAApC;QAAA;QAAA;QAAA;MAAA,QADD;IADF;MAAA;MAAA;MAAA;IAAA;EAFH;IAAA;IAAA;IAAA;EAAA,QADF;AAaD;;GA/DQrB,I;;KAAAA,I;AAiET,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}